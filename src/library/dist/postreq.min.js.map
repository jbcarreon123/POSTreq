{"version":3,"file":"postreq.min.js","sources":["../src/index.ts","../src/iframe.ts"],"sourcesContent":["import type { MessageRequest, MessageResponse } from \"./shared.js\";\nexport { POSTreq_Iframe } from './iframe.js';\n\nexport class POSTreq {\n    _iframe: HTMLIFrameElement;\n    _url?: string;\n\n    constructor(params?: {style?: string, url?: string, parentElement?: HTMLElement}) {\n        this._url = params?.url || \"https://postreq.jbc.lol/postreq\"; \n        this._iframe = document.createElement('iframe');\n        if (!params?.style) this._iframe.style.display = \"none\";\n        else this._iframe.style = params?.style;\n        this._iframe.src = this._url;\n        (params?.parentElement ?? document.body).appendChild(this._iframe);\n    }\n\n    private async onMessage(): Promise<MessageEvent<MessageResponse>> {\n        // @ts-ignore\n        return new Promise(resolve => window.onmessage = (e: MessageEvent<MessageResponse>) => {\n            if (e.origin !== this._url)\n            return resolve(e)\n        });\n    }\n\n    async fetch(url: string, req?: RequestInit): Promise<MessageResponse | null> {\n        if (url.includes('undefined')) return null;\n        const obj: MessageRequest = {\n            url,\n            req\n        }\n        this._iframe.contentWindow?.postMessage(obj);\n        const res = await this.onMessage();\n        return res.data;\n    }\n}","import type { MessageRequest } from \"./shared.js\";\n\nexport class POSTreq_Iframe {\n    constructor() {\n        console.log('POSTreq loaded. https://postreq.jbc.lol/');\n        window.addEventListener('message', async (e) => {\n            if (!e.data.url) return;\n            const evt = e as MessageEvent<MessageRequest>;\n            let p = document.querySelector('p.debug');\n            if (p) p.textContent = JSON.stringify(evt);\n            try {\n                const data = evt.data as MessageRequest;\n                const res = await fetch(data.url, data.req);\n                const headers = {};\n                res.headers.forEach((value, name) => {\n                    //@ts-ignore\n                    headers[name] = value;\n                });\n\n                let json: string | undefined;\n                try {\n                    json = await res.clone().json();\n                } catch {}\n\n                let arrayBuffer: ArrayBuffer | undefined = undefined;\n                try {\n                    arrayBuffer = await res.clone().arrayBuffer()\n                } catch {}\n\n                let blob: Blob | undefined;\n                try {\n                    blob = await res.clone().blob();\n                } catch {}\n\n                let formData: FormData | undefined;\n                try {\n                    formData = await res.clone().formData();\n                } catch {}\n\n                let text: string | undefined;\n                try {\n                    text = await res.clone().text()\n                } catch {}\n\n                const payload = {\n                    status: res.status,\n                    statusText: res.statusText,\n                    headers: headers,\n                    json,\n                    arrayBuffer,\n                    formData,\n                    blob,\n                    text,\n                    ok: res.ok\n                };\n                if (p) p.textContent = JSON.stringify(payload);\n                evt.source?.postMessage(payload);\n            } catch (e) {\n                console.log(e);\n                evt.source?.postMessage({\n                    error: e\n                });\n            }\n        })\n    }\n}\n"],"names":["_iframe","_url","constructor","params","this","url","document","createElement","style","display","src","parentElement","body","appendChild","onMessage","Promise","resolve","window","onmessage","e","origin","fetch","req","includes","obj","contentWindow","postMessage","data","console","log","addEventListener","async","evt","p","querySelector","textContent","JSON","stringify","res","headers","json","arrayBuffer","blob","formData","text","forEach","value","name","clone","payload","status","statusText","ok","source","error"],"mappings":"8PAIIA,QACAC,KAEA,WAAAC,CAAYC,GACRC,KAAKH,KAAOE,GAAQE,KAAO,kCAC3BD,KAAKJ,QAAUM,SAASC,cAAc,UACjCJ,GAAQK,MACRJ,KAAKJ,QAAQQ,MAAQL,GAAQK,MADdJ,KAAKJ,QAAQQ,MAAMC,QAAU,OAEjDL,KAAKJ,QAAQU,IAAMN,KAAKH,MACvBE,GAAQQ,eAAiBL,SAASM,MAAMC,YAAYT,KAAKJ,QAC9D,CAEQ,eAAMc,GAEV,OAAO,IAAIC,QAAQC,GAAWC,OAAOC,UAAaC,IAC9C,GAAIA,EAAEC,SAAWhB,KAAKH,KACtB,OAAOe,EAAQG,IAEvB,CAEA,WAAME,CAAMhB,EAAaiB,GACrB,GAAIjB,EAAIkB,SAAS,aAAc,OAAO,KACtC,MAAMC,EAAsB,CACxBnB,MACAiB,OAEJlB,KAAKJ,QAAQyB,eAAeC,YAAYF,GAExC,aADkBpB,KAAKU,aACZa,IACf,0BC9BA,WAAAzB,GACI0B,QAAQC,IAAI,4CACZZ,OAAOa,iBAAiB,UAAWC,MAAOZ,IACtC,IAAKA,EAAEQ,KAAKtB,IAAK,OACjB,MAAM2B,EAAMb,EACZ,IAAIc,EAAI3B,SAAS4B,cAAc,WAC3BD,IAAGA,EAAEE,YAAcC,KAAKC,UAAUL,IACtC,IACI,MAAML,EAAOK,EAAIL,KACXW,QAAYjB,MAAMM,EAAKtB,IAAKsB,EAAKL,KACjCiB,EAAU,CAAA,EAMhB,IAAIC,EAKAC,EAKAC,EAKAC,EAKAC,EAzBJN,EAAIC,QAAQM,QAAQ,CAACC,EAAOC,KAExBR,EAAQQ,GAAQD,IAIpB,IACIN,QAAaF,EAAIU,QAAQR,MAC7B,CAAE,MAAO,CAGT,IACIC,QAAoBH,EAAIU,QAAQP,aACpC,CAAE,MAAO,CAGT,IACIC,QAAaJ,EAAIU,QAAQN,MAC7B,CAAE,MAAO,CAGT,IACIC,QAAiBL,EAAIU,QAAQL,UACjC,CAAE,MAAO,CAGT,IACIC,QAAaN,EAAIU,QAAQJ,MAC7B,CAAE,MAAO,CAET,MAAMK,EAAU,CACZC,OAAQZ,EAAIY,OACZC,WAAYb,EAAIa,WAChBZ,QAASA,EACTC,OACAC,cACAE,WACAD,OACAE,OACAQ,GAAId,EAAIc,IAERnB,IAAGA,EAAEE,YAAcC,KAAKC,UAAUY,IACtCjB,EAAIqB,QAAQ3B,YAAYuB,EAC5B,CAAE,MAAO9B,GACLS,QAAQC,IAAIV,GACZa,EAAIqB,QAAQ3B,YAAY,CACpB4B,MAAOnC,GAEf,GAER"}